generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String
  password     String
  phone        String?
  role         UserRole      @default(CUSTOMER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  comments     Comment[]
  contacts     Contact[]
  orders       Order[]
  reservations Reservation[]
  feedbacks    Feedback[]

  @@map("users")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  rating    Int           @default(5)
  userId    String
  status    CommentStatus @default(APPROVED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Reservation {
  id             String            @id @default(cuid())
  userId         String
  date           DateTime
  time           String
  partySize      Int
  specialRequest String?
  status         ReservationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  message   String
  userId    String?
  status    ContactStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User?         @relation(fields: [userId], references: [id])

  @@map("contacts")
}

model Feedback {
  id        String         @id @default(cuid())
  name      String
  email     String
  message   String
  rating    Int            @default(5)
  userId    String?
  status    FeedbackStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User?          @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

enum UserRole {
  CUSTOMER
  ADMIN
  MANAGER
  CASHIER
  CHEF
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ContactStatus {
  PENDING
  REVIEWED
  RESOLVED
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum FeedbackStatus {
  PENDING
  APPROVED
  REJECTED
}
